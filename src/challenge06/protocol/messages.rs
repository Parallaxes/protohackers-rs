//! Binary protocol message definitions for the Speed Camera System.
//! 
//! This module defines the message types and data structures used in the
//! binary protocol between cameras, dispatchers, and the server.
//! 
//! # Protocol Overview
//! 
//! The protocol uses big-endian byte order and length-prefixed strings.
//! Each message starts with a `u8` message type identifier followed by 
//! message specific fields.
//! 
//! # Message Types
//! 
//! - `0x10`: Error (Server->Client) - Protocol violation response
//! - `0x20`: Plate (Client->Server) - Camera observation report  
//! - `0x21`: Ticket (Server->Client) - Speed violation ticket
//! - `0x40`: WantHeartbeat (Client->Server) - Heartbeat request
//! - `0x41`: Heartbeat (Server->Client) - Keepalive message
//! - `0x80`: IAmCamera (Client->Server) - Camera identification
//! - `0x81`: IAmDispatcher (Client->Server) - Dispatcher identification

use super::parsing::ParseError;

#[derive(PartialEq, Debug)]
pub enum Message {
    /// Protocol error message send by server when client violates protocol rules
    Error(ParseError),
    /// Number plate observation from a camera
    Plate(Plate),
    /// Speed violation ticket sent to dispatcher
    Ticket(Ticket),
    /// Client requests for periodic heartbeat messages
    WantHeartbeat(WantHeartbeat),
    /// Server heartbeat Response
    Heartbeat(Heartbeat),
    /// Camera client identification message
    IAmCamera(IAmCamera),
    /// Dispatcher client identification message
    IAmDispatcher(IAmDispatcher),
}


/// Number plate observation reported by a camera.
/// 
/// Cameras send this when they observe a vehicle passing their location.
/// Timestamps are Unix timestamps (seconds since 1970-01-01).
#[derive(PartialEq, Debug)]
pub struct Plate {
    /// Vehicle number plate (uppercase alphanumeric)
    pub plate: String,
    /// Unix timestamp when observation was made
    pub timestamp: u32,
}

/// Speed violation ticket generated by the server.
/// 
/// Sent to dispatchers when a vehicle's average speed between two
/// camera observations exceeds the road's speed limit.
#[derive(PartialEq, Debug)]
pub struct Ticket {
    /// Vehicle number plate
    pub plate: String,
    /// Road number where violation occurred
    pub road: u16,
    /// Position of first camera (miles from road start)
    pub mile1: u16,
    /// Timestamp of first observation
    pub timestamp1: u32,
    /// Position of second camera (miles from road start) 
    pub mile2: u16,
    /// Timestamp of second observation
    pub timestamp2: u32,
    /// Average speed * 100 (to avoid floating point)
    pub speed: u16,
}

/// Client request for periodic heartbeat messages.
/// 
/// Clients can request the server to send regular heartbeat messages
/// to verify the connection is still active. Only one heartbeat request
/// is allowed per connection.
#[derive(PartialEq, Debug)]
pub struct WantHeartbeat {
    /// Heartbeat interval in deciseconds (1/10th of a second).
    /// An interval of 0 means no heartbeats are wanted.
    pub interval: u32,
}

/// Server heartbeat message.
/// 
/// Sent by the server at the interval requested by the client's
/// WantHeartbeat message. Contains no data - its presence indicates
/// the server is still functioning.
#[derive(PartialEq, Debug)]
pub struct Heartbeat {}

/// Camera identification message.
/// 
/// Sent by camera clients to identify themselves and provide their
/// location and speed limit information. Must be sent before the
/// camera can report any plate observations.
#[derive(PartialEq, Debug)]
pub struct IAmCamera {
    /// Road number this camera monitors
    pub road: u16,
    /// Camera position in miles from the start of the road
    pub mile: u16,
    /// Speed limit for this road in miles per hour
    pub limit: u16,
}

/// Dispatcher identification message.
/// 
/// Sent by dispatcher clients to identify themselves and specify
/// which roads they are responsible for handling tickets on.
#[derive(PartialEq, Debug)]
pub struct IAmDispatcher {
    /// Number of roads this dispatcher handles (must match roads.len())
    pub numroads: u8,
    /// List of road numbers this dispatcher is responsible for
    pub roads: Vec<u16>,
}

/// Protocol error message.
/// 
/// Sent by the server when a client violates protocol rules.
/// The server will disconnect the client immediately after sending this.
#[derive(PartialEq, Debug)]
pub struct Error {
    /// Human-readable error message describing the violation
    pub msg: String,
}